# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  image: String
  uid: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  credentials: Credential!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type AuthProvider {
  type: AuthProviderType!
  uid: String!
}

enum AuthProviderType {
  GOOGLE
  CREDENTIALS
}

type Credential {
  uid: String!
  email: String!
  passwordHash: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Admin {
  uid: String!
  user: User!
}

type Course {
  published: Boolean
  description: String
  createdAt: DateTime!
  updatedAt: DateTime!
  id: Int!
  title: String!
  adminUid: String!
  chapters: [Chapter!]!
  chaptersLength: Int!
}

type AnswerOutput {
  answer: String!
}

type Mark {
  mark: String!
}

type Question {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  question: String!
  chapterId: Int!
}

type Chapter {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  content: String!
  courseId: Int!
  course: Course!
}

type Answer {
  explanation: String
  id: Int!
  answer: String!
  questionId: Int!
}

type Test {
  aiTotalScore: Int
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  courseId: Int!
  studentUid: String!
  questions: [Question!]!
  results: [TestQuestion!]!
  course: Course!
}

type TestResultOutput {
  questionId: String!
  feedback: String!
  marks: Int!
}

type TestQuestion {
  aiScore: Int
  aiFeedback: String
  id: Int!
  studentAnswer: String!
  testId: Int!
  questionId: Int!
  question: Question!
}

type Student {
  uid: String!
}

type Query {
  users(distinct: [UserScalarFieldEnum!], where: UserWhereInput, orderBy: [UserOrderByWithRelationInput!], cursor: UserWhereUniqueInput, take: Int, skip: Int): [User!]!
  getCredentials(email: String!): User
  getAuthProvider(uid: String!): AuthProvider
  user(where: UserWhereUniqueInput): User!
  admins(distinct: [AdminScalarFieldEnum!], where: AdminWhereInput, orderBy: [AdminOrderByWithRelationInput!], cursor: AdminWhereUniqueInput, take: Int, skip: Int): [Admin!]!
  admin(where: AdminWhereUniqueInput!): Admin!
  adminMe: Admin!
  courses(distinct: [CourseScalarFieldEnum!], where: CourseWhereInput, orderBy: [CourseOrderByWithRelationInput!], cursor: CourseWhereUniqueInput, take: Int, skip: Int): [Course!]!
  doubt(question: String!, courseInfo: String!): AnswerOutput!
  verifyAnswer(courseInfo: String!, question: String!, answer: String!): Mark!
  course(where: CourseWhereUniqueInput!): Course!
  chapters(distinct: [ChapterScalarFieldEnum!], where: ChapterWhereInput, orderBy: [ChapterOrderByWithRelationInput!], cursor: ChapterWhereUniqueInput, take: Int, skip: Int): [Chapter!]!
  chapter(where: ChapterWhereUniqueInput!): Chapter!
  questions(distinct: [QuestionScalarFieldEnum!], where: QuestionWhereInput, orderBy: [QuestionOrderByWithRelationInput!], cursor: QuestionWhereUniqueInput, take: Int, skip: Int): [Question!]!
  question(where: QuestionWhereUniqueInput!): Question!
  answers(distinct: [AnswerScalarFieldEnum!], where: AnswerWhereInput, orderBy: [AnswerOrderByWithRelationInput!], cursor: AnswerWhereUniqueInput, take: Int, skip: Int): [Answer!]!
  answer(where: AnswerWhereUniqueInput!): Answer!
  students(distinct: [StudentScalarFieldEnum!], where: StudentWhereInput, orderBy: [StudentOrderByWithRelationInput!], cursor: StudentWhereUniqueInput, take: Int, skip: Int): [Student!]!
  student(where: StudentWhereUniqueInput!): Student!
  studentMe: Student!
  tests(distinct: [TestScalarFieldEnum!], where: TestWhereInput, orderBy: [TestOrderByWithRelationInput!], cursor: TestWhereUniqueInput, take: Int, skip: Int): [Test!]!
  myTests(distinct: [TestScalarFieldEnum!], where: TestWhereInput, orderBy: [TestOrderByWithRelationInput!], cursor: TestWhereUniqueInput, take: Int, skip: Int): [Test!]!
  test(where: TestWhereUniqueInput!): Test!
  testQuestions(distinct: [TestQuestionScalarFieldEnum!], where: TestQuestionWhereInput, orderBy: [TestQuestionOrderByWithRelationInput!], cursor: TestQuestionWhereUniqueInput, take: Int, skip: Int): [TestQuestion!]!
  testQuestion(where: TestQuestionWhereUniqueInput!): TestQuestion!
}

enum UserScalarFieldEnum {
  uid
  createdAt
  updatedAt
  name
  image
}

input UserWhereInput {
  Student: StudentRelationFilter
  Admin: AdminRelationFilter
  uid: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  name: StringFilter
  image: StringFilter
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input StudentRelationFilter {
  is: StudentWhereInput
  isNot: StudentWhereInput
}

input StudentWhereInput {
  uid: StringFilter
  user: UserRelationFilter
  tests: TestListRelationFilter
  AND: [StudentWhereInput!]
  OR: [StudentWhereInput!]
  NOT: [StudentWhereInput!]
}

input StringFilter {
  mode: QueryMode
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: String
}

enum QueryMode {
  default
  insensitive
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input TestListRelationFilter {
  every: TestWhereInput
  some: TestWhereInput
  none: TestWhereInput
}

input TestWhereInput {
  Student: StudentRelationFilter
  id: IntFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  courseId: IntFilter
  aiTotalScore: IntFilter
  studentUid: StringFilter
  course: CourseRelationFilter
  questions: TestQuestionListRelationFilter
  AND: [TestWhereInput!]
  OR: [TestWhereInput!]
  NOT: [TestWhereInput!]
}

input IntFilter {
  equals: Int
  lt: Int
  lte: Int
  gt: Int
  gte: Int
}

input DateTimeFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
}

input CourseRelationFilter {
  is: CourseWhereInput
  isNot: CourseWhereInput
}

input CourseWhereInput {
  tests: TestListRelationFilter
  published: BoolFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  id: IntFilter
  title: StringFilter
  description: StringFilter
  adminUid: StringFilter
  chapters: ChapterListRelationFilter
  admin: AdminRelationFilter
  AND: [CourseWhereInput!]
  OR: [CourseWhereInput!]
  NOT: [CourseWhereInput!]
}

input BoolFilter {
  equals: Boolean
  not: Boolean
}

input ChapterListRelationFilter {
  every: ChapterWhereInput
  some: ChapterWhereInput
  none: ChapterWhereInput
}

input ChapterWhereInput {
  questions: QuestionListRelationFilter
  id: IntFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  title: StringFilter
  content: StringFilter
  courseId: IntFilter
  course: CourseRelationFilter
  AND: [ChapterWhereInput!]
  OR: [ChapterWhereInput!]
  NOT: [ChapterWhereInput!]
}

input QuestionListRelationFilter {
  every: QuestionWhereInput
  some: QuestionWhereInput
  none: QuestionWhereInput
}

input QuestionWhereInput {
  id: IntFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  question: StringFilter
  chapterId: IntFilter
  answer: AnswerRelationFilter
  chapter: ChapterRelationFilter
  testQuestions: TestQuestionListRelationFilter
  AND: [QuestionWhereInput!]
  OR: [QuestionWhereInput!]
  NOT: [QuestionWhereInput!]
}

input AnswerRelationFilter {
  is: AnswerWhereInput
  isNot: AnswerWhereInput
}

input AnswerWhereInput {
  id: IntFilter
  answer: StringFilter
  explanation: StringFilter
  questionId: IntFilter
  question: QuestionRelationFilter
  AND: [AnswerWhereInput!]
  OR: [AnswerWhereInput!]
  NOT: [AnswerWhereInput!]
}

input QuestionRelationFilter {
  is: QuestionWhereInput
  isNot: QuestionWhereInput
}

input ChapterRelationFilter {
  is: ChapterWhereInput
  isNot: ChapterWhereInput
}

input TestQuestionListRelationFilter {
  every: TestQuestionWhereInput
  some: TestQuestionWhereInput
  none: TestQuestionWhereInput
}

input TestQuestionWhereInput {
  id: IntFilter
  studentAnswer: StringFilter
  aiScore: IntFilter
  aiFeedback: StringFilter
  testId: IntFilter
  questionId: IntFilter
  Test: TestRelationFilter
  question: QuestionRelationFilter
  AND: [TestQuestionWhereInput!]
  OR: [TestQuestionWhereInput!]
  NOT: [TestQuestionWhereInput!]
}

input TestRelationFilter {
  is: TestWhereInput
  isNot: TestWhereInput
}

input AdminRelationFilter {
  is: AdminWhereInput
  isNot: AdminWhereInput
}

input AdminWhereInput {
  uid: StringFilter
  user: UserRelationFilter
  courses: CourseListRelationFilter
  AND: [AdminWhereInput!]
  OR: [AdminWhereInput!]
  NOT: [AdminWhereInput!]
}

input CourseListRelationFilter {
  every: CourseWhereInput
  some: CourseWhereInput
  none: CourseWhereInput
}

input UserOrderByWithRelationInput {
  Admin: AdminOrderByWithRelationInput
  uid: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  name: SortOrder
  image: SortOrder
  Student: StudentOrderByWithRelationInput
}

input AdminOrderByWithRelationInput {
  uid: SortOrder
  user: UserOrderByWithRelationInput
  courses: CourseOrderByRelationAggregateInput
}

enum SortOrder {
  asc
  desc
}

input CourseOrderByRelationAggregateInput {
  _count: SortOrder
}

input StudentOrderByWithRelationInput {
  uid: SortOrder
  user: UserOrderByWithRelationInput
  tests: TestOrderByRelationAggregateInput
}

input TestOrderByRelationAggregateInput {
  _count: SortOrder
}

input UserWhereUniqueInput {
  uid: String!
}

enum AdminScalarFieldEnum {
  uid
}

input AdminWhereUniqueInput {
  uid: String!
}

enum CourseScalarFieldEnum {
  id
  createdAt
  updatedAt
  title
  description
  adminUid
  published
}

input CourseOrderByWithRelationInput {
  published: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  id: SortOrder
  title: SortOrder
  description: SortOrder
  adminUid: SortOrder
  tests: TestOrderByRelationAggregateInput
  chapters: ChapterOrderByRelationAggregateInput
  admin: AdminOrderByWithRelationInput
}

input ChapterOrderByRelationAggregateInput {
  _count: SortOrder
}

input CourseWhereUniqueInput {
  id: Int!
}

enum ChapterScalarFieldEnum {
  id
  createdAt
  updatedAt
  title
  content
  courseId
}

input ChapterOrderByWithRelationInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  title: SortOrder
  content: SortOrder
  courseId: SortOrder
  questions: QuestionOrderByRelationAggregateInput
  course: CourseOrderByWithRelationInput
}

input QuestionOrderByRelationAggregateInput {
  _count: SortOrder
}

input ChapterWhereUniqueInput {
  id: Int!
}

enum QuestionScalarFieldEnum {
  id
  createdAt
  updatedAt
  question
  chapterId
}

input QuestionOrderByWithRelationInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  question: SortOrder
  chapterId: SortOrder
  answer: AnswerOrderByWithRelationInput
  chapter: ChapterOrderByWithRelationInput
  testQuestions: TestQuestionOrderByRelationAggregateInput
}

input AnswerOrderByWithRelationInput {
  id: SortOrder
  answer: SortOrder
  explanation: SortOrder
  questionId: SortOrder
  question: QuestionOrderByWithRelationInput
}

input TestQuestionOrderByRelationAggregateInput {
  _count: SortOrder
}

input QuestionWhereUniqueInput {
  id: Int!
}

enum AnswerScalarFieldEnum {
  id
  answer
  explanation
  questionId
}

input AnswerWhereUniqueInput {
  id: Int!
}

enum StudentScalarFieldEnum {
  uid
}

input StudentWhereUniqueInput {
  uid: String!
}

enum TestScalarFieldEnum {
  id
  createdAt
  updatedAt
  courseId
  aiTotalScore
  studentUid
}

input TestOrderByWithRelationInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  courseId: SortOrder
  aiTotalScore: SortOrder
  studentUid: SortOrder
  Student: StudentOrderByWithRelationInput
  course: CourseOrderByWithRelationInput
  questions: TestQuestionOrderByRelationAggregateInput
}

input TestWhereUniqueInput {
  id: Int!
}

enum TestQuestionScalarFieldEnum {
  id
  studentAnswer
  aiScore
  aiFeedback
  testId
  questionId
}

input TestQuestionOrderByWithRelationInput {
  id: SortOrder
  studentAnswer: SortOrder
  aiScore: SortOrder
  aiFeedback: SortOrder
  testId: SortOrder
  questionId: SortOrder
  Test: TestOrderByWithRelationInput
  question: QuestionOrderByWithRelationInput
}

input TestQuestionWhereUniqueInput {
  id: Int!
}

type Mutation {
  createUserWithProvider(createUserWithProviderInput: CreateUserWithProviderInput!): User!
  createUserWithCredentials(createUserWithCredentialsInput: CreateUserWithCredentialsInput!): User!
  updateUser(updateUserInput: UpdateUserInput!): User!
  removeUser(where: UserWhereUniqueInput): User!
  createAdmin(createAdminInput: CreateAdminInput!): Admin!
  updateAdmin(updateAdminInput: UpdateAdminInput!): Admin!
  removeAdmin(where: AdminWhereUniqueInput!): Admin!
  createCourse(createCourseInput: CreateCourseInput!): Course!
  updateCourse(updateCourseInput: UpdateCourseInput!): Course!
  removeCourse(where: CourseWhereUniqueInput!): Course!
  createChapter(createChapterInput: CreateChapterInput!): Chapter!
  updateChapter(updateChapterInput: UpdateChapterInput!): Chapter!
  removeChapter(where: ChapterWhereUniqueInput!): Chapter!
  createQuestion(createQuestionInput: CreateQuestionInput!): Question!
  updateQuestion(updateQuestionInput: UpdateQuestionInput!): Question!
  removeQuestion(where: QuestionWhereUniqueInput!): Question!
  createAnswer(createAnswerInput: CreateAnswerInput!): Answer!
  updateAnswer(updateAnswerInput: UpdateAnswerInput!): Answer!
  removeAnswer(where: AnswerWhereUniqueInput!): Answer!
  createStudent(createStudentInput: CreateStudentInput!): Student!
  updateStudent(updateStudentInput: UpdateStudentInput!): Student!
  removeStudent(where: StudentWhereUniqueInput!): Student!
  createTest(courseId: Int!): Test!
  submitTest(submitTestInput: [SubmitTestInput!]!, testId: Int!): [TestResultOutput!]!
  updateTest(updateTestInput: UpdateTestInput!): Test!
  removeTest(where: TestWhereUniqueInput!): Test!
  createTestQuestion(createTestQuestionInput: CreateTestQuestionInput!): TestQuestion!
  updateTestQuestion(updateTestQuestionInput: UpdateTestQuestionInput!): TestQuestion!
  removeTestQuestion(where: TestQuestionWhereUniqueInput!): TestQuestion!
}

input CreateUserWithProviderInput {
  image: String
  uid: String!
  name: String!
  type: AuthProviderType!
}

input CreateUserWithCredentialsInput {
  name: String!
  email: String!
  password: String!
  image: String
}

input UpdateUserInput {
  image: String
  uid: String!
  name: String
}

input CreateAdminInput {
  uid: String!
}

input UpdateAdminInput {
  uid: String!
}

input CreateCourseInput {
  published: Boolean
  description: String
  title: String!
  adminUid: String!
  chapters: [CreateChapterInputWithoutCourseId!]!
}

input CreateChapterInputWithoutCourseId {
  title: String!
  content: String!
  questions: [CreateQuestionInputWithoutChapterId!]!
}

input CreateQuestionInputWithoutChapterId {
  question: String!
  answer: String!
  explanation: String
}

input UpdateCourseInput {
  published: Boolean
  description: String
  title: String
  adminUid: String
  chapters: [CreateChapterInputWithoutCourseId!]
  id: Int!
}

input CreateChapterInput {
  title: String!
  content: String!
  courseId: Int!
}

input UpdateChapterInput {
  title: String
  content: String
  courseId: Int
  id: Int!
}

input CreateQuestionInput {
  question: String!
  chapterId: Int!
}

input UpdateQuestionInput {
  question: String
  chapterId: Int
  id: Int!
}

input CreateAnswerInput {
  explanation: String
  answer: String!
  questionId: Int!
}

input UpdateAnswerInput {
  explanation: String
  answer: String
  questionId: Int
  id: Int!
}

input CreateStudentInput {
  uid: String!
}

input UpdateStudentInput {
  uid: String!
}

input SubmitTestInput {
  id: Int!
  question: String!
  userAnswer: String
}

input UpdateTestInput {
  aiTotalScore: Int
  courseId: Int
  studentUid: String
  id: Int!
}

input CreateTestQuestionInput {
  aiScore: Int
  aiFeedback: String
  studentAnswer: String!
  testId: Int!
  questionId: Int!
}

input UpdateTestQuestionInput {
  aiScore: Int
  aiFeedback: String
  studentAnswer: String
  testId: Int
  questionId: Int
  id: Int!
}
# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  image: String
  uid: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  credentials: Credential!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type AuthProvider {
  type: AuthProviderType!
  uid: String!
}

enum AuthProviderType {
  GOOGLE
  CREDENTIALS
}

type Credential {
  uid: String!
  email: String!
  passwordHash: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Admin {
  uid: String!
  user: User!
}

type Course {
  published: Boolean
  description: String
  createdAt: DateTime!
  updatedAt: DateTime!
  id: Int!
  title: String!
  adminUid: String!
  chapters: [Chapter!]!
  chaptersLength: Int!
}

type Answer {
  answer: String!
}

type Question {
  question: String!
}

type Mark {
  mark: String!
}

type Chapter {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  content: String!
  courseId: Int!
}

type Query {
  users(
    distinct: [UserScalarFieldEnum!]
    where: UserWhereInput
    orderBy: [UserOrderByWithRelationInput!]
    cursor: UserWhereUniqueInput
    take: Int
    skip: Int
  ): [User!]!
  getCredentials(email: String!): User
  getAuthProvider(uid: String!): AuthProvider
  user(where: UserWhereUniqueInput): User!
  admins(
    distinct: [AdminScalarFieldEnum!]
    where: AdminWhereInput
    orderBy: [AdminOrderByWithRelationInput!]
    cursor: AdminWhereUniqueInput
    take: Int
    skip: Int
  ): [Admin!]!
  admin(where: AdminWhereUniqueInput!): Admin!
  adminMe: Admin!
  courses(
    distinct: [CourseScalarFieldEnum!]
    where: CourseWhereInput
    orderBy: [CourseOrderByWithRelationInput!]
    cursor: CourseWhereUniqueInput
    take: Int
    skip: Int
  ): [Course!]!
  doubt(question: String!, courseInfo: String!): Answer!
  takeTest(courseInfo: String!): Question!
  verifyAnswer(courseInfo: String!, question: String!, answer: String!): Mark!
  course(where: CourseWhereUniqueInput!): Course!
  chapters(
    distinct: [ChapterScalarFieldEnum!]
    where: ChapterWhereInput
    orderBy: [ChapterOrderByWithRelationInput!]
    cursor: ChapterWhereUniqueInput
    take: Int
    skip: Int
  ): [Chapter!]!
  chapter(where: ChapterWhereUniqueInput!): Chapter!
}

enum UserScalarFieldEnum {
  uid
  createdAt
  updatedAt
  name
  image
}

input UserWhereInput {
  Admin: AdminRelationFilter
  uid: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  name: StringFilter
  image: StringFilter
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input AdminRelationFilter {
  is: AdminWhereInput
  isNot: AdminWhereInput
}

input AdminWhereInput {
  uid: StringFilter
  user: UserRelationFilter
  courses: CourseListRelationFilter
  AND: [AdminWhereInput!]
  OR: [AdminWhereInput!]
  NOT: [AdminWhereInput!]
}

input StringFilter {
  mode: QueryMode
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: String
}

enum QueryMode {
  default
  insensitive
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input CourseListRelationFilter {
  every: CourseWhereInput
  some: CourseWhereInput
  none: CourseWhereInput
}

input CourseWhereInput {
  published: BoolFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  id: IntFilter
  title: StringFilter
  description: StringFilter
  adminUid: StringFilter
  chapters: ChapterListRelationFilter
  admin: AdminRelationFilter
  AND: [CourseWhereInput!]
  OR: [CourseWhereInput!]
  NOT: [CourseWhereInput!]
}

input BoolFilter {
  equals: Boolean
  not: Boolean
}

input DateTimeFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
}

input IntFilter {
  equals: Int
  lt: Int
  lte: Int
  gt: Int
  gte: Int
}

input ChapterListRelationFilter {
  every: ChapterWhereInput
  some: ChapterWhereInput
  none: ChapterWhereInput
}

input ChapterWhereInput {
  id: IntFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  title: StringFilter
  content: StringFilter
  courseId: IntFilter
  course: CourseRelationFilter
  AND: [ChapterWhereInput!]
  OR: [ChapterWhereInput!]
  NOT: [ChapterWhereInput!]
}

input CourseRelationFilter {
  is: CourseWhereInput
  isNot: CourseWhereInput
}

input UserOrderByWithRelationInput {
  Admin: AdminOrderByWithRelationInput
  uid: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  name: SortOrder
  image: SortOrder
}

input AdminOrderByWithRelationInput {
  uid: SortOrder
  user: UserOrderByWithRelationInput
  courses: CourseOrderByRelationAggregateInput
}

enum SortOrder {
  asc
  desc
}

input CourseOrderByRelationAggregateInput {
  _count: SortOrder
}

input UserWhereUniqueInput {
  uid: String!
}

enum AdminScalarFieldEnum {
  uid
}

input AdminWhereUniqueInput {
  uid: String!
}

enum CourseScalarFieldEnum {
  id
  createdAt
  updatedAt
  title
  description
  adminUid
  published
}

input CourseOrderByWithRelationInput {
  published: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  id: SortOrder
  title: SortOrder
  description: SortOrder
  adminUid: SortOrder
  chapters: ChapterOrderByRelationAggregateInput
  admin: AdminOrderByWithRelationInput
}

input ChapterOrderByRelationAggregateInput {
  _count: SortOrder
}

input CourseWhereUniqueInput {
  id: Int!
}

enum ChapterScalarFieldEnum {
  id
  createdAt
  updatedAt
  title
  content
  courseId
}

input ChapterOrderByWithRelationInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  title: SortOrder
  content: SortOrder
  courseId: SortOrder
  course: CourseOrderByWithRelationInput
}

input ChapterWhereUniqueInput {
  id: Int!
}

type Mutation {
  createUserWithProvider(
    createUserWithProviderInput: CreateUserWithProviderInput!
  ): User!
  createUserWithCredentials(
    createUserWithCredentialsInput: CreateUserWithCredentialsInput!
  ): User!
  updateUser(updateUserInput: UpdateUserInput!): User!
  removeUser(where: UserWhereUniqueInput): User!
  createAdmin(createAdminInput: CreateAdminInput!): Admin!
  updateAdmin(updateAdminInput: UpdateAdminInput!): Admin!
  removeAdmin(where: AdminWhereUniqueInput!): Admin!
  createCourse(createCourseInput: CreateCourseInput!): Course!
  updateCourse(updateCourseInput: UpdateCourseInput!): Course!
  removeCourse(where: CourseWhereUniqueInput!): Course!
  createChapter(createChapterInput: CreateChapterInput!): Chapter!
  updateChapter(updateChapterInput: UpdateChapterInput!): Chapter!
  removeChapter(where: ChapterWhereUniqueInput!): Chapter!
}

input CreateUserWithProviderInput {
  image: String
  uid: String!
  name: String!
  type: AuthProviderType!
}

input CreateUserWithCredentialsInput {
  name: String!
  email: String!
  password: String!
  image: String
}

input UpdateUserInput {
  image: String
  uid: String!
  name: String
}

input CreateAdminInput {
  uid: String!
}

input UpdateAdminInput {
  uid: String!
}

input CreateCourseInput {
  published: Boolean
  description: String
  title: String!
  adminUid: String!
  chapters: [CreateChapterInputWithoutCourseId!]!
}

input CreateChapterInputWithoutCourseId {
  title: String!
  content: String!
}

input UpdateCourseInput {
  published: Boolean
  description: String
  title: String
  adminUid: String
  chapters: [CreateChapterInputWithoutCourseId!]
  id: Int!
}

input CreateChapterInput {
  title: String!
  content: String!
  courseId: Int!
}

input UpdateChapterInput {
  title: String
  content: String
  courseId: Int
  id: Int!
}

mutation createUserWithCredentials(
  $createUserWithCredentialsInput: CreateUserWithCredentialsInput!
) {
  createUserWithCredentials(
    createUserWithCredentialsInput: $createUserWithCredentialsInput
  ) {
    uid
  }
}

mutation CreateUserWithProvider(
  $createUserWithProviderInput: CreateUserWithProviderInput!
) {
  createUserWithProvider(
    createUserWithProviderInput: $createUserWithProviderInput
  ) {
    uid
  }
}

query getCredentials($email: String!) {
  getCredentials(email: $email) {
    uid
    name
    image
    credentials {
      email
      passwordHash
    }
  }
}

query GetAuthProvider($uid: String!) {
  getAuthProvider(uid: $uid) {
    uid
    type
  }
}

fragment userDetails on User {
  image
  name
  uid
}

query adminMe {
  adminMe {
    user {
      ...userDetails
    }
  }
}

query courses(
  $where: CourseWhereInput
  $orderBy: [CourseOrderByWithRelationInput!]
  $take: Int
  $skip: Int
) {
  courses(where: $where, orderBy: $orderBy, take: $take, skip: $skip) {
    id
    title
    chaptersLength
    createdAt
    published
  }
}

query admins(
  $skip: Int
  $take: Int
  $orderBy: [AdminOrderByWithRelationInput!]
  $where: AdminWhereInput
) {
  admins(skip: $skip, take: $take, orderBy: $orderBy, where: $where) {
    uid
    user {
      name
      image
      uid
    }
  }
}

mutation createAdmin($createAdminInput: CreateAdminInput!) {
  createAdmin(createAdminInput: $createAdminInput) {
    uid
  }
}

query User($where: UserWhereUniqueInput) {
  user(where: $where) {
    name
    image
    updatedAt
    createdAt
    uid
  }
}

mutation createCourse($createCourseInput: CreateCourseInput!) {
  createCourse(createCourseInput: $createCourseInput) {
    id
  }
}

query course($where: CourseWhereUniqueInput!) {
  course(where: $where) {
    chapters {
      id
      title
    }
    description
    id
    title
    createdAt
  }
}

query chapter($where: ChapterWhereUniqueInput!) {
  chapter(where: $where) {
    id
    title
    content
    course {
      title
      description
    }
  }
}

query doubt($question: String!, $courseInfo: String!) {
  doubt(question: $question, courseInfo: $courseInfo) {
    answer
  }
}

query verifyAnswer($courseInfo: String!, $question: String!, $answer: String!) {
  verifyAnswer(courseInfo: $courseInfo, question: $question, answer: $answer) {
    mark
  }
}

mutation createTest($courseId: Int!) {
  createTest(courseId: $courseId) {
    id
    questions {
      id
      question
    }
    course {
      id
      title
    }
  }
}

query studentMe {
  studentMe {
    uid
  }
}

mutation submitTest($submitTestInput: [SubmitTestInput!]!, $testId: Int!) {
  submitTest(submitTestInput: $submitTestInput, testId: $testId) {
    feedback
    marks
    questionId
  }
}

query myTests(
  $skip: Int
  $take: Int
  $orderBy: [TestOrderByWithRelationInput!]
  $where: TestWhereInput
) {
  myTests(skip: $skip, take: $take, orderBy: $orderBy, where: $where) {
    aiTotalScore
    course {
      title
    }
    id
    results {
      aiFeedback
      aiScore
      studentAnswer
      question {
        question
      }
    }
  }
}
